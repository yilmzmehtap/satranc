/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.satranc.tahta;

import com.satranc.taslar.Fil;
import com.satranc.taslar.Tas;
import com.satranc.taslar.Kale;
import com.satranc.taslar.Piyon;
import com.satranc.taslar.Kral;
import com.satranc.taslar.Vezir;
import com.satranc.taslar.At;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 *
 * @author skardas
 */
public class ChessBoard extends javax.swing.JPanel implements MouseListener {

    TasPanel[][] cells;

    Tas secilen = null;


    /**
     * Creates new form ChessBoard
     */
    public ChessBoard() {
        initComponents();
        createChessBoard();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(640, 640));
        setLayout(new java.awt.GridLayout(8, 8));
    }// </editor-fold>//GEN-END:initComponents

    private void createChessBoard() {
        cells = new TasPanel[8][8];
        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                cells[x][y] = new TasPanel(new BorderLayout());
                cells[x][y].addMouseListener(this);

                if (y % 2 == 0) {
                    if (x % 2 != 0) {
                        cells[x][y].setBackground(Color.DARK_GRAY);
                    } else {
                        cells[x][y].setBackground(Color.WHITE);
                    }
                } else if (x % 2 == 0) {
                    cells[x][y].setBackground(Color.DARK_GRAY);
                } else {
                    cells[x][y].setBackground(Color.WHITE);
                }
            }
        }
        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                add(cells[y][x]);
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        TasPanel source = ((TasPanel) e.getSource());
        Tas tas = source.getTas();
        if(secilen == null && tas == null)
        {
            //do nothing!
        }
        else if(secilen == null && tas!=null)
        {
            if(tas.isWhite == Tas.IsWHITEORDER)
            {
                (secilen = tas).setSelected(cells);
            }
            
        }
        else
        {
            
            if(secilen.move(cells, source))
            {
                updateUI();
                Tas.IsWHITEORDER = !Tas.IsWHITEORDER;
            }
            else
            {
                secilen.setFree(cells);
            }
            secilen = null;
            
        }

    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    private void createPieces() {
        int width = getWidth() / 8;
        int height = getHeight() / 8;

        cells[4][0].add(new Vezir(true, width, height), BorderLayout.CENTER);
        cells[3][0].add(new Kral(true, width, height), BorderLayout.CENTER);

        cells[4][7].add(new Vezir(false, width, height), BorderLayout.CENTER);
        cells[3][7].add(new Kral(false, width, height), BorderLayout.CENTER);

        cells[7][0].add(new Kale(true, width, height), BorderLayout.CENTER);
        cells[0][0].add(new Kale(true, width, height), BorderLayout.CENTER);

        cells[7][7].add(new Kale(false, width, height), BorderLayout.CENTER);
        cells[0][7].add(new Kale(false, width, height), BorderLayout.CENTER);

        cells[2][0].add(new Fil(true, width, height), BorderLayout.CENTER);
        cells[5][0].add(new Fil(true, width, height), BorderLayout.CENTER);

        cells[2][7].add(new Fil(false, width, height), BorderLayout.CENTER);
        cells[5][7].add(new Fil(false, width, height), BorderLayout.CENTER);

        cells[1][0].add(new At(true, width, height), BorderLayout.CENTER);
        cells[6][0].add(new At(true, width, height), BorderLayout.CENTER);

        cells[1][7].add(new At(false, width, height), BorderLayout.CENTER);
        cells[6][7].add(new At(false, width, height), BorderLayout.CENTER);

        for (int i = 0; i < 8; i++) {
            cells[i][1].add(new Piyon(true, width, height), BorderLayout.CENTER);
            cells[i][6].add(new Piyon(false, width, height), BorderLayout.CENTER);
        }

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                cells[i][j].validate();
            }
        }

        //cells[5][5].validate();
    }

    public void buildNewGame() {
        createPieces();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
